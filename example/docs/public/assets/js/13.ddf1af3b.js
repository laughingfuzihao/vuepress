(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{404:function(e,n,r){e.exports=r.p+"assets/img/5.c4a26c76.jpg"},405:function(e,n,r){e.exports=r.p+"assets/img/8.40c64452.png"},406:function(e,n,r){e.exports=r.p+"assets/img/9.57dabc76.png"},407:function(e,n,r){e.exports=r.p+"assets/img/10.de589e62.png"},408:function(e,n,r){e.exports=r.p+"assets/img/11.b2c10c47.png"},462:function(e,n,r){"use strict";r.r(n);var t=r(3),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("    Spring Cloud Ribbon是一个基于HTTP和TCP的客户端负载均衡工具，它基于Netflix Ribbon实现。\n通过Spring Cloud的封装，可以让我们轻松地将面向服务的REST模版请求自动转换成客户端负载均衡的服务调用。"),t("br"),e._v("\n       * 1、"),t("strong",[e._v("pom依赖")]),t("br")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("                   <dependency>\n                      <groupId>org.springframework.cloud</groupId>\n                      <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n                  </dependency>\n                  <dependency>\n                      <groupId>org.springframework.cloud</groupId>\n                      <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n                  </dependency>\n")])])]),t("p",[e._v("    * 2、"),t("strong",[e._v("application.yml")]),t("br")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("          spring:\n            application:\n              name: spring-cloud-consumer-ribbon\n          \n            thymeleaf:\n              cache: false\n              prefix: classpath:/templates/\n              suffix: .html\n              encoding: UTF-8\n              servlet:\n                content-type: text/html\n              mode: HTML5\n          \n          \n          server:\n            port: 8011\n          \n          eureka:\n            client:\n              service-url:\n                defaultZone: http://localhost:8009/eureka/\n")])])]),t("p",[e._v("       * 3、"),t("strong",[e._v("启动类")]),t("br"),t("br"),e._v(" "),t("img",{attrs:{src:r(404),alt:"5"}})]),e._v(" "),t("p",[e._v("       * 4、"),t("strong",[e._v("负载均衡")]),t("br"),e._v("\n    注意@LoadBalanced注解实现的负载均衡效果  "),t("br"),e._v(" "),t("img",{attrs:{src:r(405),alt:"8"}}),e._v("\n    控制类"),t("br")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('          @RestController\n          public class RibbonController {\n          \n              @Autowired\n              private ProviderService providerService;\n          \n              @RequestMapping(value = "message",method = RequestMethod.GET)\n              public String showMessage(String message) {\n                  return providerService.showMessage(message);\n              }\n          } \n')])])]),t("p",[e._v("    ProviderService"),t("br"),e._v("\n    这里直接通过spring-cloud-provider进行调用，不用再关心provider在哪台机器哪个端口。并且\n实现了负载均衡"),t("br")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('          @Service\n          public class ProviderService {\n          \n              @Autowired\n              private RestTemplate restTemplate;\n          \n              public String showMessage(String message) {\n                  return restTemplate.getForObject("http://spring-cloud-provider/message?message=" + message, String.class);\n              }\n          \n          \n          }\n')])])]),t("p",[e._v("    效果"),t("br"),e._v(" "),t("img",{attrs:{src:r(406),alt:"9"}}),e._v(" "),t("img",{attrs:{src:r(407),alt:"10"}}),e._v(" "),t("img",{attrs:{src:r(408),alt:"11"}}),e._v("\n     本人授权"),t("a",{attrs:{href:"http://rightknights.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("维权骑士"),t("OutboundLink")],1),e._v("对我发布文章的版权行为进行追究与维权。未经本人许可，不可擅自转载或用于其他商业用途。")])])}),[],!1,null,null,null);n.default=s.exports}}]);