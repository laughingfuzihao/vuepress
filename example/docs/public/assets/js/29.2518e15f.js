(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{335:function(n,e,r){n.exports=r.p+"assets/img/ES6.7f173db6.png"},437:function(n,e,r){"use strict";r.r(e);var a=r(3),t=Object(a.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[a("img",{attrs:{src:r(335),alt:"es6"}}),a("br"),n._v("\n    ES6，全称 ECMAScript 6.0，是 JavaScript 的一个版本标准,后来就代指ES2015+以后的版本。它虽然是一个标准，但ES6添加了许多新的语法特性。"),a("br")]),n._v(" "),a("ul",[a("li",[a("strong",[n._v("1、兼容性与新特性")]),a("br"),n._v("\n    各大浏览器基本上都支持 ES6 ，IE7~11 基本不支持 ES6，chrome、firefox、Node.js、移动端可用。"),a("br"),n._v(" "),a("strong",[n._v("为解决兼容问题可使用Bebal")]),n._v("，是一种提前编译的方式，Bebal转码就是将es6代码转化为es5代码的包，用于一些不支持es6的场景，让低版本浏览器看得懂。"),a("br"),n._v("\n    我们主要看ES6新增的语法糖，语法特性。比如新的变量、函数用法、promise、generator、模块化等"),a("br")]),n._v(" "),a("li",[a("strong",[n._v("2、let 与 const")]),a("br"),n._v(" "),a("strong",[n._v("let 是在代码块内有效，var 是在全局范围内有效")]),a("br"),n._v(" "),a("strong",[n._v("let 只能声明一次 var 可以声明多次")]),a("br"),n._v(" "),a("strong",[n._v("let 不存在变量提升 需要先定义，不然会报错")]),a("br")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("console.log(a);  //ReferenceError: a is not defined\nlet a = \"apple\";\n \nconsole.log(b);  //undefined\nvar b = \"banana\";\n\nlet a = 'xxx'\n a = 'yyy' //重新赋值\n \n {\n   let a = 0;\n   var b = 1;\n }\n a  // ReferenceError: a is not defined\n b  // 1  解决计数器困境\n")])])]),a("p",[n._v("    const就相当于static final吧，"),a("strong",[n._v("不能重复声明")]),n._v("。"),a("br")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('const PI = "3.1415926";\n')])])]),a("ul",[a("li",[a("strong",[n._v("3、箭头函数")]),a("br"),n._v("\n    箭头函数就是一种函数的简写，只需记住两点。"),a("br"),n._v(" "),a("strong",[n._v("如果只有一个参数，（ ）可以省略")]),a("br"),n._v(" "),a("strong",[n._v("如果只有一个return，{ }可省略")]),a("br")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("let show = function () {\n\n};\nlet show = () => {\n\n};\n\nlet show = function (a,b) => {\n    alert(a+b);\n};    \nlet show = (a,b){\n    alert(a+b)\n};\n\n//简写：如果只有一个参数，（）可以省略\nlet show = function (a) {\n    return a*a\n};\nlet show = a => {\n    return a*a\n};\n//如果只有一个return，{}可省略\nlet show = a => a*a\n")])])]),a("ul",[a("li",[a("strong",[n._v("4、函数参数")]),a("br"),n._v("\n    函数参数扩展,"),a("strong",[n._v("不定参数")]),n._v("。args必须是最后一个参数"),a("br")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("let show = function (a,b,c ...args){\n    alert(args);\n}\n// 数组中 可展开数组\nlet show = function (a,b,c){\n    alert(a);\n    alert(b);\n    alert(c);\n}    \nshow (1,2,3);\n\nlet arr = [1,2,3];\nshow(...arr);\n")])])]),a("p",[a("strong",[n._v("默认参数，在函数不传参数时，可加一个默认值。")]),a("br")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("let show = function (a,b =5,c=6){\n        alert(a，b，c);\n}  \nshow(1,7); // 可覆盖默认值\n")])])]),a("ul",[a("li",[a("strong",[n._v("5、解构赋值")]),a("br"),n._v("\n    赋值时，左右结构保持一致，且必须首次初始化赋值。"),a("br")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("let [a, b, c] = [1, 2, 3];\nlet {a,b,c} = {a:1,b:2,c:3}\n//注意json合法写法\nlet [{a,b},[n1,n2,n3],str] = [{a:1,b:2},[1,2,3].'str']\nlet [json,arr,str] = [{a:1,b:2},[1,2,3].'str']\n\nlet [a, , b] = [1, 2, 3];\n// a = 1\n// b = 3\n")])])]),a("ul",[a("li",[a("strong",[n._v("6、数组")]),a("br"),n._v(" "),a("strong",[n._v("map映射方法")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("[1,2,3,4,5]\n[a,b,c,d,e]\nlet arr = [12,5,8];  //12,5,5\nlet a = arr.map(a => a*2)；  //24，10，10\n")])])]),a("p",[a("strong",[n._v("reduce汇总方法")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("let arr = [1,2,3,4,5];\narr.reduce(function(tmp,item,index){\n\n});\n")])])]),a("p",[a("strong",[n._v("filter过滤方法")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("let arr = [1,2,3,4,5,6];\nlet result = arr.filter(item => item%3==0); // 3,6\n")])])]),a("p",[a("strong",[n._v("forEach迭代方法")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("let arr = [1,2,3,4,5,6];\nlet result = arr.foreach(item => {\n    alert(item);\n});\n")])])]),a("ul",[a("li",[a("strong",[n._v("7、字符串")]),a("br"),n._v("\n    两个新的方法"),a("br")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('let str = "xasdafaw"\nstr.startwith("x");  //ture\nstr.endwith("w");  //false  比如判断扩展名\n')])])]),a("p",[n._v("    字符串模板"),a("br")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('let x = "b";\nlet str = `a${x}c` \\\\ abc\n')])])]),a("ul",[a("li",[a("strong",[n._v("8、json")]),a("br"),n._v("\n    JSON对象"),a("br")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('let json = {a:1,b:2};\njson.stringify  //转字符串\nlet str = \'{"a":1,"b":2}\'\nlet json = JSON.parse(str) //转json\nES6提供简写的方式\nlet str = {a:a,b:b}; // key和value一致\nlet str = {a,b};\n')])])]),a("ul",[a("li",[a("strong",[n._v("9、面向对象")]),a("br")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('class User{         // 类似于java\n    constructor(name,age){ //构造器\n        this.name=name;\n        this.age=age;\n    }\n    showName(){         //构造方法\n        return this.name;\n    }\n}\n\nlet user1 = User("xxx","23");\nuser1.showName();\n//  继  承\nclass VipUser extends User{\n    constructor(name,age,level){ //构造器\n        super(name,age); //执行父类构造函数\n        this.level=level;\n    }    \n    showLevel(){         //构造方法\n        return this.level;\n    }        \n}\n')])])]),a("ul",[a("li",[a("strong",[n._v("10、promise")]),a("br"),n._v("\n    Promise 是一个对象，从它可以获取异步操作的消息。可了解fetch方法解决ajax回调地狱的文章。"),a("br")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v('// Promise 对象\nlet p = new promise(function (resolve,reject){ \n      //resolve成功 reject失败\n\n// ajax 原来的写法\n$("#ajaxTest").click(function () {\n  $.ajax({\n    url: "/ajax_test/",\n    type: "POST",\n    data: {username: "laughing", password: 123456},\n    success: function (data) {\n      resolve(data)；\n    }，\n    error:(err){\n      reject(err);\n    }\n  })\n})\n// Promise\n p.then(function(value) {\n  // success\n }, function(value) {\n  // failure\n });\n\n }) \n')])])]),a("p",[n._v("    当有两个Promise对象时，就可解决回调地狱的问题。"),a("br")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("// Promise 对象 等两个异步操作都执行完。\nlet p1 = new promise(function (resolve,reject){ }\nlet p2 = new promise(function (resolve,reject){ }\n\npromise.all([p1,p2]).then(function(arr) {\n    // success 全部成功\n    let [res1,res2] = arr;\n }, function(value) {\n   // failure 至少一个失败\n });\n }) \n \n promise.race()  // 竞争 读第一个成功的异步请求\n \n \n // axios支持的promise\n   axios.all([getUserAccount(), getUserPermissions()])\n     .then(axios.spread(function (acct, perms) {\n       // Both requests are now complete\n     }));     \n")])])]),a("ul",[a("li",[a("strong",[n._v("11、generator 生成器")]),a("br")])]),n._v(" "),a("p",[n._v("    generator可以通过 yield 关键字，把函数的执行流挂起。可等待异步操作而挂起。"),a("br")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("function * show(){\n    alert('a');\n    yield;  // 放弃执行\n    alert('b');\n}\n\nlet genObj = show();\ngenObj.next();  // a\ngenObj.next();  // b\n")])])]),a("ul",[a("li",[a("strong",[n._v("持续更新中")]),a("br")])]),n._v(" "),a("p",[n._v("     本人授权"),a("a",{attrs:{href:"http://rightknights.com",target:"_blank",rel:"noopener noreferrer"}},[n._v("维权骑士"),a("OutboundLink")],1),n._v("对我发布文章的版权行为进行追究与维权。未经本人许可，不可擅自转载或用于其他商业用途。")])])}),[],!1,null,null,null);e.default=t.exports}}]);